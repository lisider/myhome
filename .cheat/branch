# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]
$ git branch –set-upstream master origin/master

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支,合并的是该提交以及之前的提交
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
或者
$ git branch -r -d origin/branch-name  
$ git push origin :branch-name  


git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)

git branch -vv
* dev    6ec6694 [origin/dev] add 12 on dev
  master 7ea920f [origin/master] add 11


#拉下来代码,只有 master 分支,但 远程仓库上 有很多分支
git checkout --track origin/dev

#比较分支
git diff <branch1> <branch2>

#Git远程分支管理
git pull (抓取远程仓库所有分支更新并合并到本地)
git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git pull upstream master
git fetch origin # 抓取远程仓库更新
git merge origin/master # 将远程主分支合并到本地当前分支
git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支
git co -b origin/ # 基于远程分支创建本地分支，功能同上

